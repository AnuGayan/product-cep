/* Enter a unique ExecutionPlan */
@Plan:name('$executionPlanName')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

@Import('standardSpatialEvents:1.0.0')
define stream dataIn (id string, latitude double, longitude double, timeStamp long, type string ,speed float, heading float, eventId string);


@Export('processedSpatialEvents:1.0.0')
define stream dataOut (id string, latitude double, longitude double, timeStamp long, type string ,speed float, heading float, eventId string, state string, information string);

@IndexBy('id')
define table StationeryTable(id string, timeStamp long);

from dataIn#geodashboard:subscribe()
select id, latitude, longitude, timeStamp, type, speed, heading, eventId,geo:within(longitude,latitude,"$geoFenceGeoJSON") as isWithin
insert into innerStreamOne;

from innerStreamOne[isWithin == false]
delete StationeryTable on StationeryTable.id==innerStreamOne.id;

from innerStreamOne[isWithin == false]
select id , latitude, longitude,timeStamp, type, speed, heading ,eventId , "false"  as isStationary
insert into dataOutStream;

from innerStreamOne[isWithin == true]#geo:stationary(id,longitude,latitude, $fluctuationRadius)
select id, latitude, longitude, timeStamp, type, speed, heading, eventId,stationary
insert into innerStreamTwo;

from innerStreamTwo[innerStreamTwo.stationary == true AND not(StationeryTable.id == innerStreamTwo.id in StationeryTable)]
select innerStreamTwo.id, innerStreamTwo.timeStamp
insert into StationeryTable;

from innerStreamTwo[innerStreamTwo.stationary == false]
delete StationeryTable on StationeryTable.id==innerStreamTwo.id;

from innerStreamOne[isWithin == true AND not(StationeryTable.id == innerStreamOne.id in StationeryTable)]
select id , latitude, longitude,timeStamp, type, speed, heading ,eventId , "false"  as isStationary
insert into dataOutStream;

from innerStreamOne[isWithin == true AND StationeryTable.id == innerStreamOne.id in StationeryTable]
insert into innerStreamThree;

from innerStreamThree#window.length(0) join StationeryTable
on innerStreamThree.id == StationeryTable.id
select innerStreamThree.id , innerStreamThree.latitude, innerStreamThree.longitude,innerStreamThree.timeStamp, innerStreamThree.type, innerStreamThree.speed, innerStreamThree.heading ,innerStreamThree.eventId, StationeryTable.timeStamp as storedTime
insert into innerStreamFour;

from innerStreamFour[(timeStamp - storedTime) >= $stationeryTime]
select id , latitude, longitude,timeStamp, type, speed, heading ,eventId ,"true"  as isStationary
insert into dataOutStream;

from innerStreamFour[(timeStamp - storedTime) < $stationeryTime]
select id , latitude, longitude,timeStamp, type, speed, heading ,eventId ,"false"  as isStationary
insert into dataOutStream;

from dataOutStream[isStationary == 'true']
select id ,latitude, longitude,timeStamp, type, speed, heading ,eventId ,"ALERTED" as state, "This vehicle is in $stationeryName area!!!" as information
insert into dataOut;

from dataOutStream[isStationary == 'false']
select id , latitude, longitude,timeStamp, type, speed, heading ,eventId ,"NORMAL" as state,""  as information
insert into dataOut;